* UBX example
  UNDER CONSTRUCTION
** Install ubx and ubx_cmake
   - Look at the [[https://github.com/UbxTeam/microblx][ubx readme]] to find out which dependencies there and install them on your system.
*** Workspace
    Make a ubx workspace directory.
    #+BEGIN_EXAMPLE
    ~ $ mkdir ubx
    ~ $ cd ubx
    #+END_EXAMPLE
*** [[https://github.com/UbxTeam/microblx][Microblx]]
    #+BEGIN_EXAMPLE
    ~/ubx $ git clone https://github.com/UbxTeam/microblx.git
    #+END_EXAMPLE
    You might want to use the 'dev' branch.
    #+BEGIN_EXAMPLE
    ~/ubx $ cd microblx
    ~/ubx/microblx $ git checkout dev
    ~/ubx/microblx $ cd ..
    #+END_EXAMPLE
*** [[https://github.com/haianos/microblx_cmake][Ubx Cmake]]
    #+BEGIN_EXAMPLE
    ~/ubx$ git clone https://github.com/haianos/microblx_cmake.git
    #+END_EXAMPLE
    You might also want to use the 'dev' branch here.
    #+BEGIN_EXAMPLE
    ~/ubx $ cd microblx_cmake
    ~/ubx/microblx_cmake $ git checkout dev
    ~/ubx/microblx_cmake $ cd ..
    #+END_EXAMPLE
*** Sourceme.sh ifle
    Write a sourceme.sh file for yourself
    This file needs to be sourced in every terminal session where you want to use ubx.
    #+BEGIN_EXAMPLE
    ~/ubx $ cat sourceme.sh # TODO WORK THIS OUT BETTER
    export UBX_ROOT=$HOME/microblx
    source $UBX_ROOT/env.sh
    export UBX_MODULES=$HOME/microblx/install/lib/ubx
    export CMAKE_PREFIX_PATH=$HOME/microblx/install/share/ubx/cmake
    #+END_EXAMPLE
    You might want to put in your shell's startup script.
      - bash:
      #+BEGIN_EXAMPLE
      ~/ubx $ echo 'source path/to/sourceme.sh' >> .bashrc
      #+END_EXAMPLE
      - zsh:
      #+BEGIN_EXAMPLE
      ~/ubx $ echo 'source path/to/sourceme.sh' >> .zshrc
      #+END_EXAMPLE
*** Compile microblx
    To compile ubx, the sourceme.sh file has to be sourced.
    #+BEGIN_EXAMPLE
    ~/ubx $ source sourceme.sh
    #+END_EXAMPLE
    After that, just run make in the ubx directory.
    #+BEGIN_EXAMPLE
    ~/ubx $ cd microblx
    ~/ubx/microblx $ make # Don't use multiple core option -jn
    #+END_EXAMPLE
*** Current situation
    At this point, you ~/ubx directory should look like this:
    #+BEGIN_EXAMPLE
    ~/ubx
    |- microblx
    |- microblx_cmake
    |- sourceme.sh
    #+END_EXAMPLE

** Making a package
   The process of making a package consists of the following steps.
   1. Design the model for the ubx package.
   2. Design the model for the blocks.
   3. Generate the package.
   4. Implement the types
   5. Implement the blocks
   6. Building with cmake
*** Designing the package model.
    A package contains a set of blocks types.

    To design the package model, write a package model ('.pkg') file.
    Example:

#+BEGIN_EXAMPLE
$ cat example_pkg.pkg
return pkg
{
  -- The name of the package
  name="example",
  
  -- Optional: The path to the directory where the package will be generated
  -- (No trailing slash)
  path=".",
      
  -- Optional: The dependencies of the package
  -- These could be dependencies on other packages, blocks, types or libraries
  dependencies = {
    -- name: the name of the dependecy
    -- type:
    --   |- cmake: >TODO<
    --   >TODO<
    --
    { name="kdl-types", type="cmake" },
  },
  
  -- Optional: The types that are used in the package
  -- All types have to be declared, not only custom types. >TODO<
  -- >TODO< {Is it the name of the directory, a relative path or an absolute path?}
  types = {
    -- name: The name of the type
    -- dir: The directory in which the type is declared
    { name="my_type", dir="types" },
    { name="vector", dir="types" },
    { name="robot_data", dir="types" },
  },
  
  -- The blocks that are defined in the package
  blocks = {
    -- name: The name of the block
    -- file: The file in which the block is declared
    -- src_dir: The source directory in which the code will be generated.
    -- >TODO< {Is it the name of the directory, a relative path or an absolute path?}
    { name="myblock", file="examples/example_block.blx", src_dir="src" },
    { name="myblock2", file="examples/example_block2.blx", src_dir="src2" },
  },
  
  -- The modules that the package provides
  modules = {
    -- name: The name of the module
    -- blocks: The names of the blocks in the module
    { name="mylib", blocks={"myblock"} },
    { name="anotherlib", blocks={"myblock2"} } ,
  },
}
#+END_EXAMPLE
    Note the comma's at the end of each item in a list.
    The last item can also have such a comma.

    You can find a real example in the models subdirectory of this repository

    You can now *generate code for your package*.
    
** Creating an ubx system composition
COMING SOON
*** Designing the composition
*** Creating a launch script
*** Launch the application
