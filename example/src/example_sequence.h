/*
 * example_sequence microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */


/* block meta information */
char example_sequence_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t example_sequence_config[] = {
        { NULL },
};

/* declaration port block ports */
ubx_port_t example_sequence_ports[] = {
        { .name="first", .out_type_name="WHAT HERE", .out_data_len=1, .in_type_name="WHAT HERE", .in_data_len=1, .doc="The first port to trigger." },
        { .name="second", .out_type_name="WHAT HERE", .out_data_len=1, .doc="The second port to trigger."  },
        { NULL },
};

/* declare a struct port_cache */
struct example_sequence_port_cache {
        ubx_port_t* first;
        ubx_port_t* second;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct example_sequence_port_cache *pc)
{
        pc->first = ubx_port_get(b, "first");
        pc->second = ubx_port_get(b, "second");
}


/* for each port type, declare convenience functions to read/write from ports */
def_read_fun(read_first, WHAT HERE)
def_write_fun(write_second, WHAT HERE)

/* block operation forward declarations */
int example_sequence_init(ubx_block_t *b);
int example_sequence_start(ubx_block_t *b);
void example_sequence_stop(ubx_block_t *b);
void example_sequence_cleanup(ubx_block_t *b);
void example_sequence_step(ubx_block_t *b);


/* put everything together */
ubx_block_t example_sequence_block = {
        .name = "example_sequence",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = example_sequence_meta,
        .configs = example_sequence_config,
        .ports = example_sequence_ports,

        /* ops */
        .init = example_sequence_init,
        .start = example_sequence_start,
        .stop = example_sequence_stop,
        .cleanup = example_sequence_cleanup,
        .step = example_sequence_step,
};


/* example_sequence module init and cleanup functions */
int example_sequence_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;

        if(ubx_block_register(ni, &example_sequence_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void example_sequence_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        ubx_block_unregister(ni, "example_sequence");
}

